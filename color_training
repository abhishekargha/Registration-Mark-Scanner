// Define the pins for the color sensor
#define S0 2 // Output frequency scaling selection pin
#define S1 3 // Output frequency scaling selection pin
#define S2 4 // Photodiode type selection pin
#define S3 5 // Photodiode type selection pin
#define sensorOut 6 // Frequency output pin

// Define the variables for storing frequency values
int redFrequency = 0;
int greenFrequency = 0;
int blueFrequency = 0;

// Define the threshold values for color detection
// You can adjust these values based on your sensor calibration and lighting conditions
#define RED_MIN 50 // Minimum frequency value for red color
#define RED_MAX 100 // Maximum frequency value for red color
#define GREEN_MIN 50 // Minimum frequency value for green color
#define GREEN_MAX 100 // Maximum frequency value for green color
#define BLUE_MIN 50 // Minimum frequency value for blue color
#define BLUE_MAX 100 // Maximum frequency value for blue color

// Define the constants for color names
#define COLOR_NONE 0 // No color detected
#define COLOR_RED 1 // Red color detected
#define COLOR_GREEN 2 // Green color detected
#define COLOR_BLUE 3 // Blue color detected
#define COLOR_PINK 4 // Pink color detected
#define COLOR_YELLOW 5 // Yellow color detected

// Define the variable for storing the detected color
int color = COLOR_NONE;

// Define the pin for the buzzer
#define buzzer 10 //buzzer to arduino pin 10

// Define the array for the desired color sequence
int colorSequence[] = {COLOR_RED, COLOR_BLUE, COLOR_GREEN, COLOR_YELLOW, COLOR_PINK};

// Define the variable for the current index in the color sequence
int colorIndex = 0;

void setup() {
  // Set the pins as outputs or inputs
  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);
  pinMode(sensorOut, INPUT);
  pinMode(buzzer, OUTPUT); // Set the buzzer pin as an output

  // Set the frequency scaling to 20%
  // You can change this value to 2%, 20%, or 100% by changing the HIGH and LOW of S0 and S1
  digitalWrite(S0, HIGH);
  digitalWrite(S1, LOW);

  // Initialize serial communication
  Serial.begin(9600);
}

void loop() {
  // Read the frequency values for each color
  redFrequency = readFrequency(S2, LOW, S3, LOW); // Select red filter
  greenFrequency = readFrequency(S2, HIGH, S3, HIGH); // Select green filter
  blueFrequency = readFrequency(S2, LOW, S3, HIGH); // Select blue filter

  // Print the frequency values to the serial monitor
  Serial.print("Red Frequency: ");
  Serial.print(redFrequency);
  Serial.print(" | Green Frequency: ");
  Serial.print(greenFrequency);
  Serial.print(" | Blue Frequency: ");
  Serial.println(blueFrequency);

  // Detect the color using a decision tree
  color = detectColor(redFrequency, greenFrequency, blueFrequency);

  // Check the color sequence
  if (color == colorSequence[colorIndex]) {
    // The color matches the sequence
    noTone(buzzer); // Stop the buzzer sound
    colorIndex++; // Increment the index
    colorIndex = colorIndex % 5; // Wrap around the index
  } else {
    // The color does not match the sequence
    tone(buzzer, 1000); // Start the buzzer sound
  }

  // Print the detected color to the serial monitor
  Serial.print("Color: ");
  switch (color) {
    case COLOR_RED:
      Serial.println("Red");
      break;
    case COLOR_GREEN:
      Serial.println("Green");
      break;
    case COLOR_BLUE:
      Serial.println("Blue");
      break;
    case COLOR_PINK:
      Serial.println("Pink");
      break;
    case COLOR_YELLOW:
      Serial.println("Yellow");
      break;
    default:
      Serial.println("None");
      break;
  }

  // Add a delay of N nanoseconds before repeating the process
  // You can change the value of N according to your needs
  delayMicroseconds(N); // N is in nanoseconds
}

// A function to read the frequency value from the sensor
int readFrequency(int s2, int s3, int s4, int s5) {
  // Set the photodiode type
  digitalWrite(S2, s2);
  digitalWrite(S3, s3);
  digitalWrite(S4, s4);
  digitalWrite(S5, s5);

  // Read the frequency value using the pulseIn() function
  int frequency = pulseIn(sensorOut, LOW);

  // Return the frequency value
  return frequency;
}

// A function to detect the color using a decision tree
int detectColor(int red, int green, int blue) {
  // Declare a variable to store the color
  int color = COLOR_NONE;

  // Check if the frequency values are within the threshold ranges for each color
  // Change the order of the if-else statements to look for red, blue, green, yellow, and pink colors
  if (red >= RED_MIN && red <= RED_MAX) {
    // Red color detected
    color = COLOR_RED;
  } else if (blue >= BLUE_MIN && blue <= BLUE_MAX) {
    // Blue color detected
    color = COLOR_BLUE;
  } else if (green >= GREEN_MIN && green <= GREEN_MAX) {
    // Green color detected
    color = COLOR_GREEN;
  } else if (red >= RED_MIN && red <= RED_MAX && green >= GREEN_MIN && green <= GREEN_MAX) {
    // Yellow color detected
    color = COLOR_YELLOW;
  } else if (red >= RED_MIN && red <= RED_MAX && blue >= BLUE_MIN && blue <= BLUE_MAX) {
    // Pink color detected
    color = COLOR_PINK;
  }

  // Return the color
  return color;
}
